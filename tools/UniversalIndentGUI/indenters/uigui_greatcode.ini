[header]
categories=General|Space|Code|Statements|Pre-Processor|Comments|Miscellaneous
cfgFileParameterEnding=cr
configFilename=gc.cfg
fileTypes=*.cpp|*.c|*.h|*.hpp
indenterFileName=greatcode
indenterName=GreatCode (C, C++)
inputFileName=indentinput
inputFileParameter=-file-
manual=http://universalindent.sf.net/indentermanuals/gc.txt
outputFileName=indentinput
outputFileParameter=none
parameterOrder=ipo
showHelpParameter=-h
stringparaminquotes=false
useCfgFileParameter=none
version=1.140

[overwrite_read_only]
Category=0
Description=Process read only files (change status)
EditorType=boolean
TrueFalse=-overwrite_read_only-|-no-overwrite_read_only-
ValueDefault=0

[tab_size]
CallName=-tab_size-
Category=0
Description="<html>Set the level (number of blanks) of an indentation level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -tab_size-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>            a++<br>        }<br><br>        -tab_size-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>          a++<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=1
ValueDefault=4

[tab_out]
Category=0
Description=Output tab characters instead of spaces
EditorType=boolean
TrueFalse=-tab_out-|-no-tab_out-
ValueDefault=1

[eol_unix]
Category=0
Description=Unix format for carriage returns
EditorType=boolean
TrueFalse=-eol_unix-|-no-eol_unix-
ValueDefault=0

[space_if]
Category=1
Description="<html>Output a blank character after if. while. for and switch keywords.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_if-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if (a)<br>        {<br>            while (a--)<br>            {<br>            }<br>        }<br><br>        -no-space_if-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>            while(a--)<br>            {<br>            }<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-space_if-|-no-space_if-
ValueDefault=0

[space_return]
Category=1
Description="<html>Output a blank character after return if return is followed by an open<br>        parenthesis.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_return-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        return (6)<br><br>        -no-space_return-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        return(6)</font></pre></html>"
EditorType=boolean
TrueFalse=-space_return-|-no-space_return-
ValueDefault=0

[space_fctcall]
Category=1
Description="<html>Output a blank character before the open parenthese of a function call.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call (out)<br>        loop (100)<br><br>        -no-space_fctcall-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100)</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctcall-|-no-space_fctcall-
ValueDefault=0

[space_fctcall_firstparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctcall_firstparam-|-no-space_fctcall_firstparam-
ValueDefault=0

[space_fctcall_inparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctcall_inparam-|-no-space_fctcall_inparam-
ValueDefault=1

[space_fctcall_lastparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctcall_lastparam-|-no-space_fctcall_lastparam-
ValueDefault=0

[space_fctdef_firstparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdef_firstparam-|-no-space_fctdef_firstparam-
ValueDefault=0

[space_fctdef_lastparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdef_lastparam-|-no-space_fctdef_lastparam-
ValueDefault=0

[space_fctdecl_firstparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdecl_firstparam-|-no-space_fctdecl_firstparam-
ValueDefault=0

[space_fctdecl_lastparam]
Category=1
Description="<html>Output a blank character before the first/last/inside parameter of a function <br>\t\tcall. definition or declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1. 2. 3. 4)<br><br>        -no-space_fctcall_inparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(1.2.3.4)<br><br>        -space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call( out)<br>        loop( 100. 200)<br><br>        -no-space_fctcall_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        main_call(out)<br>        loop(100. 200)<br><br>        -space_fctdef_firstparam-<br>        -space_fctdef_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out )<br>        {<br>        }<br><br>        -space_fctdecl_firstparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call( int out. int in)<br><br>        -space_fctdecl_lastparam-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main_call(int out. int in )</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdecl_lastparam-|-no-space_fctdecl_lastparam-
ValueDefault=0

[space_fctdecl]
Category=1
Description="<html>Output a blank character before the open parenthese of a function <br>        definition / declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctdecl-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        extern func (a)<br><br>        -space_fctdef-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int func (a)<br>        {<br>        }<br><br>        -no-space_fctdef-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int func(a)<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdecl-|-no-space_fctdecl-
ValueDefault=0

[space_fctdef]
Category=1
Description="<html>Output a blank character before the open parenthese of a function <br>        definition / declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_fctdecl-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        extern func (a)<br><br>        -space_fctdef-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int func (a)<br>        {<br>        }<br><br>        -no-space_fctdef-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int func(a)<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-space_fctdef-|-no-space_fctdef-
ValueDefault=0

[space_paren]
CallName=-space_paren-
Category=1
Description="<html>Add spaces after '(' and before ')' if the nested level of the<br>        parenthese is lower than the argument.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_paren-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if((a < 5) && (b > 2))<br>        {<br>        }<br><br>        -space_paren-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if( (a < 5) && (b > 2) )<br>        {<br>        }<br><br>        -space_paren-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if( ( a < 5 ) && ( b > 2 ) )<br>        {<br>        }<br><br>        See option(s) :<br>        [-no]-space_cast-<br><br>        Note(s) :<br>        - Empty expressions () are not modified.<br>        - Casts are not modified.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[space_cast]
Category=1
Description="<html>Add spaces after '(' and before ')' for cast operators.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_cast-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(( int * ) b)<br>        {<br>        }<br><br>        return ( int * ) b<br><br>        -no-space_cast-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if((int *) b)<br>        {<br>        }<br><br>        return (int *) b<br><br>        See option(s) :<br>        -space_paren-<num></font></pre></html>"
EditorType=boolean
TrueFalse=-space_cast-|-no-space_cast-
ValueDefault=0

[space_cast_after]
Category=1
Description="<html>Add a space after a cast expression.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_cast_after-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if((int *) b)<br>        {<br>        }<br><br>        return ( int * ) b<br><br>        -no-space_cast_after-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if((int *)b)<br>        {<br>        }<br><br>        return (int *)b<br><br>        See option(s) :<br>        [-no]-space_cast-</font></pre></html>"
EditorType=boolean
TrueFalse=-space_cast_after-|-no-space_cast_after-
ValueDefault=1

[space_scope_def]
Category=1
Description="<html>Add a space before and after the scope resolution operator '::' in the<br>        function definition.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_scope_def-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void func :: Ping(void)<br>        {<br>        }<br><br>        -no-space_scope_def-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void func::Ping(void)<br>        {<br>        }<br><br>        See option(s) :<br>        [-no]-space_scope_access-</font></pre></html>"
EditorType=boolean
TrueFalse=-space_scope_def-|-no-space_scope_def-
ValueDefault=0

[space_scope_access]
Category=1
Description="<html>Add a space before and after the scope resolution operator '::' when<br>        accessing a static method.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_scope_access-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void func::Ping(void)<br>        {<br>            Base :: Ping()<br>            Base :: Pong()<br>        }<br><br>        -no-space_scope_access-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void func::Ping(void)<br>        {<br>            Base::Ping()<br>            Base::Pong()<br>        }<br><br>        See option(s) :<br>        [-no]-space_scope_def-</font></pre></html>"
EditorType=boolean
TrueFalse=-space_scope_access-|-no-space_scope_access-
ValueDefault=0

[space_affect_style]
CallName=-space_affect_style-
Category=1
Description="<html>Set the indent style for affect and auto-affectoperators.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_affect_style-0<br>        -space_autoaffect_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a = b = c      <== Affect<br>        a *= 6         <== Auto-Affect<br><br>        -space_affect_style-1<br>        -space_autoaffect_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a= b= c<br>        a*= 6<br><br>        -space_affect_style-2<br>        -space_autoaffect_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a=b=c<br>        a*=6</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[space_autoaffect_style]
CallName=-space_autoaffect_style-
Category=1
Description="<html>Set the indent style for affect and auto-affectoperators.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -space_affect_style-0<br>        -space_autoaffect_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a = b = c      <== Affect<br>        a *= 6         <== Auto-Affect<br><br>        -space_affect_style-1<br>        -space_autoaffect_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a= b= c<br>        a*= 6<br><br>        -space_affect_style-2<br>        -space_autoaffect_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        a=b=c<br>        a*=6</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[code_len]
CallName=-code_len-
Category=2
Description=Maximum length of a line of code
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=8
ValueDefault=120

[code_keep_empty_lines]
Category=2
Description=Keep empty lines in original file
EditorType=boolean
TrueFalse=-code_keep_empty_lines-|-no-code_keep_empty_lines-
ValueDefault=1

[code_keep_more_empty_lines]
Category=2
Description=Make more effort to preserve empty lines in the original file - even in the face of other reformatting
EditorType=boolean
TrueFalse=-code_keep_more_empty_lines-|-no-code_keep_more_empty_lines-
ValueDefault=0

[code_remove_empty_lines]
CallName=-code_remove_empty_lines-
Category=2
Description="<html>Remove all excedent empty lines. If num is 1. then only one single<br>        blank line is authorized.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_remove_empty_lines-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a<br>        <EOL><br>        <EOL><br>        int a<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a<br>        <EOL><br>        int a</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=1
ValueDefault=2

[code_split_bool_before]
Category=2
Description="<html>Determine the aspect of boolean expressions when they must be split<br>        because they are too long.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_bool_before-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if<br>        (<br>            (A + main(func) + 6 > 60)<br>        &&  (B - 50 > 10)<br>        ||  var<br>        )<br>        {<br>        }<br><br>        -no-code_split_bool_before-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if<br>        (<br>            (A + main(func) + 6 > 60) &&<br>            (B - 50 > 10) ||<br>            var<br>        )<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_split_bool_before-|-no-code_split_bool_before-
ValueDefault=1

[code_split_fctcall_style]
CallName=-code_split_fctcall_style-
Category=2
Description="<html>Set the style when GC must break a function call/def/decl. a for <br>        statement or an if statement if the line is too long. <br>        The resulting style is the same for all options. <br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_fctcall_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function<br>        (<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>        )<br><br>        -code_split_fctcall_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter. parameter. parameter.<br>                 parameter. parameter. parameter.<br>                 parameter)<br><br>        -code_split_fctcall_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter)<br><br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter. parameter. parameter. parameter.<br>            parameter. parameter. parameter)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[code_split_fctdef_style]
CallName=-code_split_fctdef_style-
Category=2
Description="<html>Set the style when GC must break a function call/def/decl. a for <br>        statement or an if statement if the line is too long. <br>        The resulting style is the same for all options. <br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_fctcall_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function<br>        (<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>        )<br><br>        -code_split_fctcall_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter. parameter. parameter.<br>                 parameter. parameter. parameter.<br>                 parameter)<br><br>        -code_split_fctcall_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter)<br><br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter. parameter. parameter. parameter.<br>            parameter. parameter. parameter)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[code_split_fctdecl_style]
CallName=-code_split_fctdecl_style-
Category=2
Description="<html>Set the style when GC must break a function call/def/decl. a for <br>        statement or an if statement if the line is too long. <br>        The resulting style is the same for all options. <br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_fctcall_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function<br>        (<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>        )<br><br>        -code_split_fctcall_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter. parameter. parameter.<br>                 parameter. parameter. parameter.<br>                 parameter)<br><br>        -code_split_fctcall_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter)<br><br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter. parameter. parameter. parameter.<br>            parameter. parameter. parameter)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[code_split_for_style]
CallName=-code_split_for_style-
Category=2
Description="<html>Set the style when GC must break a function call/def/decl. a for <br>        statement or an if statement if the line is too long. <br>        The resulting style is the same for all options. <br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_fctcall_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function<br>        (<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>        )<br><br>        -code_split_fctcall_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter. parameter. parameter.<br>                 parameter. parameter. parameter.<br>                 parameter)<br><br>        -code_split_fctcall_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter)<br><br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter. parameter. parameter. parameter.<br>            parameter. parameter. parameter)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[code_split_if_style]
CallName=-code_split_if_style-
Category=2
Description="<html>Set the style when GC must break a function call/def/decl. a for <br>        statement or an if statement if the line is too long. <br>        The resulting style is the same for all options. <br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_split_fctcall_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function<br>        (<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>        )<br><br>        -code_split_fctcall_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter. parameter. parameter.<br>                 parameter. parameter. parameter.<br>                 parameter)<br><br>        -code_split_fctcall_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        function(parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter.<br>                 parameter)<br><br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter.<br>            parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter.<br>        parameter)<br>        {<br>        }<br><br>        -code_split_fctdef_style-5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void function(<br>            parameter. parameter. parameter. parameter.<br>            parameter. parameter. parameter)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[code_split_decl_style]
CallName=-code_split_decl_style-
Category=2
Description="<html>Set style of indentation for declaration of variables.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a. b. c = 10<br>\t\tint d<br><br>        -code_split_decl_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a.<br>            b.<br>            c = 10<br>\t\tint d<br><br>        -code_split_decl_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a<br>        int b<br>        int c = 10<br>\t\tint d</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[code_constructor_style]
CallName=-code_constructor_style-
Category=2
Description="<html>Set style of indentation for constructors.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_constructor_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        cons::cons(void) :<br>            set(0).<br>            reset(0)<br>        {<br>        }<br><br>        -code_constructor_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        cons::cons(void) : set(0). reset(0)<br>        {<br>        }<br><br>        -code_constructor_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        cons::cons(void) :<br>        set(0).<br>        reset(0)<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[code_decl_move_affect]
Category=2
Description="<html>Move initialization in local variables declaration just after the<br>        declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_decl_move_affect-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a = 0<br>            int     c = a + 1<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a<br>            int     c<br><br>            a = 0      <= initializations has been moved<br>            c = a + 1<br>        }<br><br>        Note(s) :<br>        - Be careful because this option sometimes does not work well. That's<br>          why it's set to FALSE by default.</font></pre></html>"
EditorType=boolean
TrueFalse=-code_decl_move_affect-|-no-code_decl_move_affect-
ValueDefault=0

[code_decl_move_top]
Category=2
Description="<html>Move all local variables declaration to the top of the corresponding<br>        statement.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_decl_move_top-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a. b<br><br>            a = b = 0<br>            while(a)<br>            {<br>            }<br><br>            int c          <= declaration<br>            c = 10<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a. b<br>            int c          <= declaration has been moved<br><br>            a = b = 0<br>            while(a)<br>            {<br>            }<br><br>            c = 10<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_decl_move_top-|-no-code_decl_move_top-
ValueDefault=0

[code_decl_access_to_type]
Category=2
Description="<html>Move * and & access specifier just after the type if TRUE. or<br>        just before the name if FALSE.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_decl_access_to_type-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int**   p<br>        int function(int* b. int& ref)<br>        {<br>        }<br><br>        -no-code_decl_access_to_type-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int     **p<br>        int function(int *b. int &ref)<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_decl_access_to_type-|-no-code_decl_access_to_type-
ValueDefault=0

[code_decl_break_template]
Category=2
Description="<html>Force an EOL after a template declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_decl_break_template-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        template<class T. int i>    <= EOL<br>        class TestClass<br>        {<br>        public:<br>            char    buffer[i]<br>            T\t\ttestFunc(T *p1)<br>        }<br><br>        -no-code_decl_break_template-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        template<class T. int i> class TestClass<br>        {<br>        public:<br>            char    buffer[i]<br>            T\t\ttestFunc(T *p1)<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_decl_break_template-|-no-code_decl_break_template-
ValueDefault=1

[code_decl_add_void]
Category=2
Description="<html>Force the voidkeyword in a function declaration if nothing is<br>        specified.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int function()<br>        {<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int function(void)<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_decl_add_void-|-no-code_decl_add_void-
ValueDefault=0

[code_wizard_indent]
Category=2
Description="<html>Indent code between to devstudio appwizard special comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_wizard_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class   a<br>        {<br>        protected:<br>        //{{AFX_MSG(CDocument)<br>        enum a              <= has been touched<br>        {<br>            id = 0<br>        }<br>        afx_msg void    OnFileClose(void)<br>        afx_msg void    OnFileSave(void)<br>        afx_msg void    OnFileSaveAs(void)<br>        //}}AFX_MSG<br>        DECLARE_MESSAGE_MAP()<br>        }<br><br>        -no-code_wizard_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class   a<br>        {<br>        protected:<br>        //{{AFX_MSG(CDocument)<br>        enum a { id = 0 }          <= same as original file<br>        afx_msg void    OnFileClose(void)<br>        afx_msg void    OnFileSave(void)<br>        afx_msg void    OnFileSaveAs(void)<br>        //}}AFX_MSG<br>        DECLARE_MESSAGE_MAP()<br>        }<br><br>        Note(s) :<br>        - This option must be set to FALSE if you want to indent special<br>          appwizard headers with auto generated code. This is because touching<br>          that code can make appwizard fail to recognize its special marks.<br>        - This option can't be set in a source file with special comment<br>          /*$O */</font></pre></html>"
EditorType=boolean
TrueFalse=-code_wizard_indent-|-no-code_wizard_indent-
ValueDefault=1

[code_force_return_paren]
Category=2
Description="<html>Force parentheses around a returnexpression.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_force_return_paren-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a()<br>        {<br>            return 0<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a()<br>        {<br>            return(0)<br>        }<br><br>        See option(s) :<br>        [-no]-code_remove_return_paren-<br><br>        Note(s) :<br>        - This option can't be set in a source file with special comment<br>          /*$O */<br>        - Can't be used with -code_remove_return_paren- option.</font></pre></html>"
EditorType=boolean
TrueFalse=-code_force_return_paren-|-no-code_force_return_paren-
ValueDefault=0

[code_remove_return_paren]
Category=2
Description=Remove all parentheses around a return parameter
EditorType=boolean
TrueFalse=-code_remove_return_paren-|-no-code_remove_return_paren-
ValueDefault=0

[code_align_max_blanks]
CallName=-code_align_max_blanks-
Category=2
Description="<html>Set the maximum number of blank characters that can be added by GC to<br>        align declarations of variables or functions.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_align_max_blanks-10<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int     a<br>        un_int  b<br>        unsigned int    coucou<br>        unsigned int    bg<br><br>        -code_align_max_blanks-20<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int         a<br>        un_int      b<br>        unsigned int    coucou<br>        unsigned int    bg</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=1
ValueDefault=1000

[code_def_fct_break_return_type]
Category=2
Description="<html>Force a line break after the return type in a function definition.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_def_fct_break_return_type-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int<br>        function(void)<br>        {<br>        }<br><br>        int <br>        class::func(void)<br>        {<br>        }<br><br>        -no-code_def_fct_break_return_type-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int function(void)<br>        {<br>        }<br><br>        int class::func(void)<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-code_def_fct_break_return_type-|-no-code_def_fct_break_return_type-
ValueDefault=0

[code_concat_strings]
Category=2
Description="<html>Concat adjacent string constants.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -no-code_concat_strings-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        printf(coucoulafoule)<br><br>        -code_concat_strings-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        printf(coucoulafoule)</font></pre></html>"
EditorType=boolean
TrueFalse=-code_concat_strings-|-no-code_concat_strings-
ValueDefault=0

[code_empty_fct_blanks]
CallName=-code_empty_fct_blanks-
Category=2
Description="<html>Add empty lines between { and } for empty functions. Empty function<br>        must have no code between { and }.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_empty_fct_blanks-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void empty(void)<br>        { }<br><br>        -code_empty_fct_blanks-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void empty(void)<br>        {<br>        }<br><br>        -code_empty_fct_blanks-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void empty(void)<br>        {<br><br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[catch_eol_before]
CallName=-catch_eol_before-
Category=2
Description=Number of EOL before catch
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[code_class_access_eol_before]
CallName=-code_class_access_eol_before-
Category=2
Description="<html>Number of EOL before/after class access specifiers.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_class_access_eol_after-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>        public:             <EOL><br>            void a(void)<br><br>        private:            <EOL><br>            void ab(void)<br>        }<br><br><br>        -code_class_access_eol_before-2<br>        -code_class_access_eol_after-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<EOL><br>        <EOL><br>        public:             <EOL><br>                            <EOL><br>                            <EOL><br>            void a(void)<br>        <EOL><br>        <EOL><br>        private:            <EOL><br>                            <EOL><br>                            <EOL><br>            void ab(void)<br>        }<br><br>        See option(s) :<br>        -code_remove_empty_lines-<num></font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[code_class_access_eol_after]
CallName=-code_class_access_eol_after-
Category=2
Description="<html>Number of EOL before/after class access specifiers.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_class_access_eol_after-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>        public:             <EOL><br>            void a(void)<br><br>        private:            <EOL><br>            void ab(void)<br>        }<br><br><br>        -code_class_access_eol_before-2<br>        -code_class_access_eol_after-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<EOL><br>        <EOL><br>        public:             <EOL><br>                            <EOL><br>                            <EOL><br>            void a(void)<br>        <EOL><br>        <EOL><br>        private:            <EOL><br>                            <EOL><br>                            <EOL><br>            void ab(void)<br>        }<br><br>        See option(s) :<br>        -code_remove_empty_lines-<num></font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[code_labels_eol_after]
CallName=-code_labels_eol_after-
Category=2
Description="<html>Number of EOL after labels.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -code_labels_eol_after-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>            goto label<br>        label:              <EOL><br>            a++<br><br>        -code_labels_eol_after-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>            goto label<br>        label:              <EOL><br>                            <EOL><br>            a++<br><br>        See option(s) :<br>        -code_remove_empty_lines-<num></font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[stmt_break_alone]
Category=3
Description="<html>Force an empty statement to be alone on its line.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_break_alone-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        for(a = 0 a < 10 a++)<br>            <br><br>        -no-stmt_break_alone-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        for(a = 0 a < 10 a++)<br><br>        Note(s) :<br>        - Concerns if. while. for and switch statements.</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_break_alone-|-no-stmt_break_alone-
ValueDefault=0

[stmt_break_dowhile]
Category=3
Description="<html>Force a break line before the while of a do...while statement.<br>        Example :<pre><font face=\"courier new\" size=\"3\">\t\t-stmt_break_dowhile-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\tdo<br>\t\t{<br>\t\t\t...<br>\t\t} <br>\t\twhile(1)<br><br>\t\t-no-stmt_break_dowhile-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\tdo<br>\t\t{<br>\t\t\t...<br>\t\t} while(1)</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_break_dowhile-|-no-stmt_break_dowhile-
ValueDefault=0

[stmt_force_brace]
CallName=-stmt_force_brace-
Category=3
Description="<html>Force a statement to be enclosed with { } if its length exceeded the<br>        given parameter.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_force_brace-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a) a++<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>            a++<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=100

[code_eol_after_close_brace]
CallName=-code_eol_after_close_brace-
Category=3
Description="<html>Nu<pre><font face=\"courier new\" size=\"3\">mber of blank lines after every close brace -<br>        except ones followed by else. while. and those around typedef<br>        statements...<br><br>        -stmt_force_brace-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if foo) {<br>          bar()<br>        }<br>        if foo) {<br>          bar()<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if foo) {<br>          bar()<br>        }<br><br>        if foo) {<br>          bar()<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[stmt_concat_if]
Category=3
Description="<html>Try to output if. while or for expression on a single line if the<br>        length of the statement is not too long.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_if-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        while(a && b)<br>            a = b + 6<br>        if(a)<br>            a++<br>        if(b)<br>        {<br>            b++<br>        }<br><br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        while(a && b) a = b + 6<br>        if(a) a++<br>        if(b)<br>        {<br>            b++<br>        }<br><br>        See options(s) :<br>        -code_len-<num><br><br>        Note(s) :<br>        - This option does not modify statements with { }.</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_if-|-no-stmt_concat_if-
ValueDefault=1

[stmt_concat_if_and_else]
Category=3
Description="<html>Try to output if ... else expression on two lines - if possible...<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_if_and_else-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>            a++<br>        else<br>            b++<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a) a++<br>        else b++<br><br>        See options(s) :<br>        -code_len-<num><br><br>        Note(s) :<br>        - This option does not modify statements with { }.</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_if_and_else-|-no-stmt_concat_if_and_else-
ValueDefault=0

[stmt_concat_else_2_stmt]
Category=3
Description="<html>Put the else on the same line as the previous statement.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_else_2_stmt-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>        } else<br>        {<br>        }<br><br>        -no-stmt_concat_else_2_stmt-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a)<br>        {<br>        } <br>        else<br>        {<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_else_2_stmt-|-no-stmt_concat_else_2_stmt-
ValueDefault=0

[stmt_concat_else_if]
Category=3
Description="<html>Close up any gap between else and if in else ... ifstructures.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_else_if-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(foo) <br>\t\t{<br>        } <br>\t\telse if(bar) <br>\t\t{<br>        }<br><br>        -no-stmt_concat_else_if-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(foo) <br>\t\t{<br>        } else<br>        if(bar) <br>\t\t{<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_else_if-|-no-stmt_concat_else_if-
ValueDefault=1

[stmt_concat_inline_class]
Category=3
Description="<html>Concat if possible inline function body inside a class.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_inline_class-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>            int previous(int a)<br>            {<br>                return a - 1<br>            }<br>            int next(int a)<br>            {<br>                return a + 1<br>            }<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class   a<br>        {<br>            int previous(int a) { return a - 1 }<br>            int next(int a)     { return a + 1 }<br>        }<br><br>        See options(s) :<br>        -code_len-<num></font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_inline_class-|-no-stmt_concat_inline_class-
ValueDefault=1

[stmt_concat_switch]
Category=3
Description="<html>Concat all cases of a switch if possible. Empty lines are removed if<br>\t\tconcatenation is done.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_switch-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>        case 10:<br>            break<br><br>        case 11:<br>            a = a + 6 return a<br><br>        case 12:<br>            if(a) a++<br>            break<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>        case 10:    break<br>        case 11:    a = a + 6 return a<br>        case 12:    if(a) a++ break<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_switch-|-no-stmt_concat_switch-
ValueDefault=1

[stmt_concat_macros]
Category=3
Description="<html>Concat a macro body if possible.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_macros-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #define macro()<br>        {<br>            a = a + 18 - b<br>            if(!a) return 10<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #define macro() { a = a + 18 - b if(!a) return 10 }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_macros-|-no-stmt_concat_macros-
ValueDefault=1

[stmt_concat_enum]
Category=3
Description="<html>Concat content of enum if possible.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_enum-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        enum a<br>        {<br>            id1.<br>            id2<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        enum a { id1. id2 }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_enum-|-no-stmt_concat_enum-
ValueDefault=1

[stmt_decl_remove_empty]
Category=3
Description="<html>Remove empty lines in declaration statements.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_decl_remove_empty-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a<br>                        <= Empty line<br>            int b<br>            int c<br><br>            a = b = c = 0<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            int a<br>            int b<br>            int c<br><br>            a = b = c = 0<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_decl_remove_empty-|-no-stmt_decl_remove_empty-
ValueDefault=1

[stmt_concat_if_remove_empty]
Category=3
Description="<html>Remove empty lines between concat if/while/for.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_concat_if_remove_empty-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a) a++<br>                        <= Empty line<br>                        <= Empty line<br>        if(b) b = b + a<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        if(a) a++<br>        if(b) b = b + a<br><br>        See option(s) :<br>        [-no]-stmt_concat_if- to concat if/while/for expressions if possible.</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_concat_if_remove_empty-|-no-stmt_concat_if_remove_empty-
ValueDefault=1

[stmt_brace_style_class]
CallName=-stmt_brace_style_class-
Category=3
Description="<html>Change the indentation style of braces.<br>        -stmt_brace_style_class- for a class declaration.<br>        -stmt_brace_style_fct- for a function body.<br>        -stmt_brace_style_decl- for declarations (struct. enum).<br>        -stmt_brace_style- for all other statements (if. while...).<br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>            {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>            {<br>            while(a)<br>                {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {   while(a)<br>            {   a = a + func(a)<br>            }<br>        }<br><br>        Style 5 offset brace by 1/2 tab width<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>              {<br>                a = a + func(a)<br>              }<br>        }<br><br>        Note(s) :<br>        - Valid values are only 0. 1. 2. 3. 4 or 5.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[stmt_brace_style_fct]
CallName=-stmt_brace_style_fct-
Category=3
Description="<html>Change the indentation style of braces.<br>        -stmt_brace_style_class- for a class declaration.<br>        -stmt_brace_style_fct- for a function body.<br>        -stmt_brace_style_decl- for declarations (struct. enum).<br>        -stmt_brace_style- for all other statements (if. while...).<br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>            {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>            {<br>            while(a)<br>                {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {   while(a)<br>            {   a = a + func(a)<br>            }<br>        }<br><br>        Style 5 offset brace by 1/2 tab width<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>              {<br>                a = a + func(a)<br>              }<br>        }<br><br>        Note(s) :<br>        - Valid values are only 0. 1. 2. 3. 4 or 5.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[stmt_brace_style_decl]
CallName=-stmt_brace_style_decl-
Category=3
Description="<html>Change the indentation style of braces.<br>        -stmt_brace_style_class- for a class declaration.<br>        -stmt_brace_style_fct- for a function body.<br>        -stmt_brace_style_decl- for declarations (struct. enum).<br>        -stmt_brace_style- for all other statements (if. while...).<br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>            {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>            {<br>            while(a)<br>                {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {   while(a)<br>            {   a = a + func(a)<br>            }<br>        }<br><br>        Style 5 offset brace by 1/2 tab width<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>              {<br>                a = a + func(a)<br>              }<br>        }<br><br>        Note(s) :<br>        - Valid values are only 0. 1. 2. 3. 4 or 5.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[stmt_brace_style]
CallName=-stmt_brace_style-
Category=3
Description="<html>Change the indentation style of braces.<br>        -stmt_brace_style_class- for a class declaration.<br>        -stmt_brace_style_fct- for a function body.<br>        -stmt_brace_style_decl- for declarations (struct. enum).<br>        -stmt_brace_style- for all other statements (if. while...).<br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>            {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>            {<br>            while(a)<br>                {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>            }<br>        }<br><br>        Style 3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void) {<br>            while(a) {<br>                a = a + func(a)<br>                }<br>            }<br><br>        Style 4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {   while(a)<br>            {   a = a + func(a)<br>            }<br>        }<br><br>        Style 5 offset brace by 1/2 tab width<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void main(void)<br>        {<br>            while(a)<br>              {<br>                a = a + func(a)<br>              }<br>        }<br><br>        Note(s) :<br>        - Valid values are only 0. 1. 2. 3. 4 or 5.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[stmt_switch_style]
CallName=-stmt_switch_style-
Category=3
Description="<html>Change the indentation style of switch.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>        case 0:<br>            a++<br>            break<br>        case 1:<br>            break<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>            case 0:<br>                a++<br>                break<br>            case 1:<br>                break<br>        }<br><br>        Style 2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>            {<br>            case 0:<br>                a++<br>                break<br>            case 1:<br>                break<br>            }<br><br>        Style 3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a) {<br>        case 0:<br>            a++<br>            break<br>        case 1:<br>            break<br>        }<br><br>        Style 4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a) {<br>            case 0:<br>                a++<br>                break<br>            case 1:<br>                break<br>        }<br><br>        Style 5<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>          {<br>        case 0:<br>            a++<br>            break<br>        case 1:<br>            break<br>          }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=5
MinVal=0
ValueDefault=0

[stmt_switch_eol]
CallName=-stmt_switch_eol-
Category=3
Description="<html>Is there an empty line before the casekeyword ?<br><br>        Example :<pre><font face=\"courier new\" size=\"3\">        Style 0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>        case 0:<br>\t\tcase 3:<br>            a++<br>            break<br><br>        case 1:<br>            break<br><br>        case 4:<br>            break<br>        }<br><br>        Style 1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        switch(a)<br>        {<br>        case 0:<br>\t\tcase 3:<br>            a++<br>            break<br>        case 1:<br>            break<br>        case 4:<br>            break<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=1
MinVal=0
ValueDefault=0

[stmt_class_indent]
CallName=-stmt_class_indent-
Category=3
Description="<html>Set the number of additional indentation levels in a class declaration.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -stmt_class_indent-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>        public:<br>            void a(void)<br>        }<br><br>        -stmt_class_indent-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>            public:<br>                void a(void)<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[stmt_namespace_indent]
Category=3
Description="<html>Indent one level a namespace statement.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -no-stmt_namespace_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        namespace com<br>        {<br>        int a(void)<br>        {<br>        }<br>        }<br><br>        -stmt_namespace_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        namespace com<br>        {<br>            int a(void)<br>            {<br>            }<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_namespace_indent-|-no-stmt_namespace_indent-
ValueDefault=0

[stmt_extern_c_indent]
Category=3
Description="<html>Indent one level an extern Cstatement.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -no-stmt_extern_c_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        extern C<br>        {<br>        int a(void)<br>        {<br>        }<br>        }<br><br>        -stmt_extern_c_indent-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        extern C<br>        {<br>            int a(void)<br>            {<br>            }<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-stmt_extern_c_indent-|-no-stmt_extern_c_indent-
ValueDefault=0

[stmt_static_init_style]
CallName=-stmt_static_init_style-
Category=3
Description="<html>De<pre><font face=\"courier new\" size=\"3\">fines indent style for static initialisations.<br><br>\t\t-stmt_static_init_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\tchar *d[] = <br>\t\t{ <br>\t\t\tNULL. <br>\t\t\tROM. <br>\t\t\tOTPROM. <br>\t\t\tEPROM. <br>\t\t\tEEPROM. <br>\t\t\tFLASH<br>\t\t}<br><br>\t\t-stmt_static_init_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\tchar *d[] = { NULL. ROM. OTPROM. EPROM. EEPROM. FLASH}<br><br>\t\t-stmt_static_init_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\tchar *d[] = <br>\t\t{ <br>\t\t\tNULL. ROM. OTPROM. <br>\t\t\tEPROM. EEPROM. FLASH<br>\t\t}<br><br>        Note(s) :<br>        - Option -stmt_static_init_style-1 let the original indentation <br>\t\t  unchanged.<br>        - The max length of the line in the initialisation statement for option<br>\t\t  -stmt_static_init_style-3 is defined by the -stmt_static_init_len-<br>\t\t  option.<br><br>        See option(s) :<br>\t\t-stmt_static_init_len-<num></font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=3
MinVal=0
ValueDefault=0

[stmt_static_init_len]
CallName=-stmt_static_init_len-
Category=3
Description="<html>To<pre><font face=\"courier new\" size=\"3\"> be used with -stmt_static_init_style-3. Defined the max length of</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=80

[pp_align_to_code]
Category=4
Description="<html>Align or not PP directive to the code just below.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -pp_align_to_code-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #define a   0<br>        void main(void)<br>        {<br>            #define a       0<br>            #define coucou  0<br>            #define coucou() <br>                while(a) <br>                { <br>                    a = a + func(a) <br>                }<br><br>            #if 0<br>            if(a) a++<br>            #endif<br>        }<br><br>        -no-pp_align_to_code-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #define a   0<br>        void main(void)<br>        {<br>        #define a       0<br>        #define coucou  0<br>        #define coucou() <br>            while(a) <br>            { <br>                a = a + func(a) <br>            }<br><br>        #if 0<br>            if(a) a++<br>        #endif<br>        }<br><br>        Note(s) :<br>        - This option can't be used in source file file special comment /*$O*/.</font></pre></html>"
EditorType=boolean
TrueFalse=-pp_align_to_code-|-no-pp_align_to_code-
ValueDefault=0

[pp_style]
CallName=-pp_style-
Category=4
Description="<html>Set the indentation style of PP directives.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -pp_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #ifdef a<br>            a++<br>        #else<br>        #if 0<br>        #ifdef a<br>        #elif b<br>            a--<br>        #endif<br>        #endif<br>        #endif<br><br>        -pp_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #ifdef a<br>            a++<br>        #else<br>            #if 0<br>                #ifdef a<br>                #elif b<br>            a--<br>                #endif<br>            #endif<br>        #endif<br><br>        -pp_style-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #ifdef a<br>            a++<br>        #else<br>        #   if 0<br>        #      ifdef a<br>        #      elif b<br>            a--<br>        #      endif<br>        #   endif<br>        #endif</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[pp_include_unix]
Category=4
Description="<html>Change '' to '/' in an include expression.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #include gll.h<br>        #include <gll.h><br><br>        -pp_include_unix-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #include gl/gl.h<br>        #include <gl/gl.h><br><br>        -no-pp_include_unix-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        #include gll.h<br>        #include <gll.h></font></pre></html>"
EditorType=boolean
TrueFalse=-pp_include_unix-|-no-pp_include_unix-
ValueDefault=1

[pp_align_breakline]
Category=4
Description="<html>Al<pre><font face=\"courier new\" size=\"3\">ign (or not) breakline characters '' in macros.<br><br>        -pp_align_breakline-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\t#define a(A)         <br>\t\t\tA += 2\t\t\t <br>\t\t\tA = c(fonc) + 3 <br><br>        -no-pp_align_breakline-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>\t\t#define a(A) <br>\t\t\tA += 2\t<br>\t\t\tA = c(fonc) + 3</font></pre></html>"
EditorType=boolean
TrueFalse=-pp_align_breakline-|-no-pp_align_breakline-
ValueDefault=0

[cmt_fixme]
CallName=-cmt_fixme-
Category=5
Description="<html>Specify the string for FIXME comment the default is /* FIXME: Comment */<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_fixme-/* TODO: add comment */</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=/* */

[cmt_align_max_blanks]
CallName=-cmt_align_max_blanks-
Category=5
Description="<html>Set the max number of blank characters to add to align last line<br>        comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_align_max_blanks-20<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int         coucou     /* comment */<br>        unsigned int    b      /* comment */<br>        unsigned int    long_long_variable_variables   /* comment */<br><br>        -cmt_align_max_blanks-30<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int         coucou             /* comment */<br>        unsigned int    b                  /* comment */<br>        unsigned int    long_long_variable_variables   /* comment */</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=1
ValueDefault=10

[cmt_first_space_cpp]
Category=5
Description="<html>Force a space after the opening comment delimiter.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_space_cpp-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        // coucou<br><br>        -no-cmt_first_space_cpp-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        //coucou</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_space_cpp-|-no-cmt_first_space_cpp-
ValueDefault=1

[cmt_dont_modify]
Category=5
Description="<html>Pr<pre><font face=\"courier new\" size=\"3\">ocess or not all the comments of the file.</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_dont_modify-|-no-cmt_dont_modify-
ValueDefault=0

[cmt_add_gc_tag]
Category=5
Description=<html>Add the GC mark at the beginning of the file.<br><br>        /*$T test.c GC 1.102 01/06/01 16:47:25 */</html>
EditorType=boolean
TrueFalse=-cmt_add_gc_tag-|-no-cmt_add_gc_tag-
ValueDefault=1

[cmt_add_file]
Category=5
Description=<html>Add a special comment at the beginning of file (if not already<br>        present). The type of the comment is set by -cmt_add_file_style-.<br><br>        -cmt_add_file-<br>        -cmt_add_file_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ** file.c **<br>        /*$6<br>         ++++++++++++++++++++++++++++++++++++++++++<br>         ++++++++++++++++++++++++++++++++++++++++++<br>         */<br>        ...<br>        ** EOF **<br><br>        -cmt_add_file-<br>        -cmt_add_file_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ** file.c **<br>        /*$I0<br>            ...<br>         */<br>        ...<br>        ** EOF **<br><br>        See option(s) :<br>        -cmt_sep_char_6-<char><br>        -cmt_sep_len-<num><br>        -cmt_add_file_style-<num></html>
EditorType=boolean
TrueFalse=-cmt_add_file-|-no-cmt_add_file-
ValueDefault=1

[cmt_add_file_style]
CallName=-cmt_add_file_style-
Category=5
Description="<html>Special comment style for -cmt_add_file- option.<br>        0 = special comment level 6 /*$6<br>        1 = special comment external insertion file /*$I0<br><br>        -cmt_add_file_style-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ** file.c **<br>        /*$6<br>         ++++++++++++++++++++++++++++++++++++++++++<br>         ++++++++++++++++++++++++++++++++++++++++++<br>         */<br><br>        -cmt_add_file_style-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ** file.c **<br>        /*$I0<br>            ...<br>         */<br><br>        See option(s) :<br>        [no]-cmt_add_file-<br>        Special comment /*$I<num>*/</html>"
EditorType=numeric
Enabled=true
MaxVal=1
MinVal=0
ValueDefault=0

[cmt_add_fct_def]
Category=5
Description="<html>Add an empty comment before function definition (if not already<br>        present).<br>        Comment is level is set by -cmt_sep_force_fct_def- option.<br><br>        ** file.c **<br><br>        /*<br>         ==========================================<br>         ==========================================<br>         */<br>        int a(void)<br>        {<br>        }<br><br>        ** EOF **<br><br>        See option(s) :<br>        -cmt_sep_char_3-<char><br>        -cmt_sep_len-<num><br>        -cmt_sep_force_fct_def-<num><br><br>        Note(s) :<br>        - Actual comments before function are included in the separator.</html>"
EditorType=boolean
TrueFalse=-cmt_add_fct_def-|-no-cmt_add_fct_def-
ValueDefault=1

[cmt_add_fct_def_class]
Category=5
Description=<html>Same as -cmt_add_fct_def-. but for functions defined inside a class<br>\t\t(inline functions).<br><br>        See option(s) :<br>\t\t-cmt_add_fct_def-</html>
EditorType=boolean
TrueFalse=-cmt_add_fct_def_class-|-no-cmt_add_fct_def_class-
ValueDefault=1

[cmt_trailing_style]
CallName=-cmt_trailing_style-
Category=5
Description="<html>Co<pre><font face=\"courier new\" size=\"3\">ntrol style of trailing comments and an empty comment is added to<br>        function parameters if not already present. <br>        This also causes -cmt_force_fct_def_decl_split-<br>        and -code_split_fctdef_style-3. The content of<br>        empty comment is defined by -cmt_fixme-.<br><br>        -cmt_trailing_style-1<br>        -cmt_force_fct_def_decl_split-<br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        before:<br><br>        int a(int param1. int param2)                   ## No comments<br>        {<br>        }<br><br>        after:<br><br>        int a(<br>            int param1. /* FIXME: add a comment */      ## Added automatically<br>            int param2) /* FIXME: add a comment */      ## Added automatically<br>        {<br>        }<br><br><br>        -cmt_trailing_style-2<br>        -cmt_force_fct_def_decl_split-<br>        -code_split_fctdef_style-3<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        before:<br><br>        int a(<br>            int param1. /* IN: parameter 1 */<br>            int param2) /* IN: parameter 2 */<br>        {<br>        }<br><br>        after:<br><br>        int a(<br>            int param1. ///< IN: parameter 1            ## Changed to cpp<br>            int param2) ///< IN: parameter 2            ## Changed to cpp<br>        {<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2
MinVal=0
ValueDefault=0

[cmt_split_before_@_in_fct_cmts]
Category=5
Description=Split lines in fucntion comments before @
EditorType=boolean
TrueFalse=-cmt_split_before_@_in_fct_cmts-|-no-cmt_split_before_@_in_fct_cmts-
ValueDefault=0

[cmt_force_fct_def_decl_split]
Category=5
Description="<html>Fo<pre><font face=\"courier new\" size=\"3\">rce function definitions to split at each paramenter according<br>        to the sytle defined by -code_split_fctdef_style-</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_force_fct_def_decl_split-|-no-cmt_force_fct_def_decl_split-
ValueDefault=0

[cmt_java_doc]
Category=5
Description=Enable the java doc type comments for all comments. Also enables -cmt_sep_fill_star- and -cmt_fct_java_doc-
EditorType=boolean
TrueFalse=-cmt_java_doc-|-no-cmt_java_doc-
ValueDefault=0

[cmt_fct_java_doc]
Category=5
Description=Enable the java doc type comments for functions only. Also enables -cmt_sep_fill_star-.
EditorType=boolean
TrueFalse=-cmt_fct_java_doc-|-no-cmt_fct_java_doc-
ValueDefault=0

[cmt_add_class_access]
Category=5
Description="<html>Add an empty comment before class access (if not already present).<br>        Comment level is set by -cmt_sep_force_class_access- option.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_add_class_access-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>        public:<br>            void v(void)<br>        protected:<br>            int c<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        class a<br>        {<br>        /*      <= by default. cmt level is 2<br>         ==========================================<br>         ==========================================<br>         */<br>        public:<br>            void v(void)<br><br>        /*<br>         ==========================================<br>         ==========================================<br>         */<br>        protected:<br>            int c<br>        }<br><br>        See option(s) :<br>        -cmt_sep_char_2-<char><br>        -cmt_sep_len-<num><br>        -cmt_sep_force_class_access-<num></font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_add_class_access-|-no-cmt_add_class_access-
ValueDefault=1

[cmt_keep_cpp]
Category=5
Description="<html>Keep C++ comments. and do not change them to the C form.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -no-cmt_keep_cpp-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        // this is a comment<br>        // this is another comment<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * this is a comment <br>         * this is another comment<br>         */<br><br>        See option(s) :<br>        [no]-cmt_cpp2c_keep_eol-<br>        -cmt_sep_char_split-<char><br><br>        Note(s) :<br>        - This option can't be set in a source file with special comment<br>          /*$O */</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_keep_cpp-|-no-cmt_keep_cpp-
ValueDefault=0

[cmt_c2cpp]
Category=5
Description=<html>Convert all C comments to the C++ form. Only end of lines comments are<br>        converted.<br>        See option(s) :<br>        -cmt_keep_cpp-<br><br>        Note(s) :<br>        - This option set the -cmt_keep_cpp- to true.</html>
EditorType=boolean
TrueFalse=-cmt_c2cpp-|-no-cmt_c2cpp-
ValueDefault=0

[cmt_cpp2c_keep_eol]
Category=5
Description="<html>Keep trace of EOL characters when converting C++ comments to C<br>        comment. -cmt_keep_cpp- must be enabled.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        // this is a comment<br>        // this is another comment<br><br>        -cmt_cpp2c_keep_eol-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * this is a comment           <=  is the default break character<br>         * this is another comment<br>         */<br><br>        -no-cmt_cpp2c_keep_eol-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* this is a comment this is another comment */<br><br>        See option(s) :<br>        [no]-cmt_keep_cpp-<br>        -cmt_sep_char_split-<char></font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_cpp2c_keep_eol-|-no-cmt_cpp2c_keep_eol-
ValueDefault=1

[cmt_fct_categ]
CallName=-cmt_fct_categ-
Category=5
Description="<html>-cmt_fct_categ-     Define a special word when indenting function<br>                            comments.<br>        -cmt_fct_categ_in-  This word is a special category to describe<br>                            function parameters.<br><br>        GC can indent function definition comments in a special form<br>        depending of special words defined with those options.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        options<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        -cmt_fct_categ-main<br>        -cmt_fct_categ-output<br>        -cmt_fct_categ_in-parameters<br><br><br>        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Description: Description of the function. Return: none<br>        Parameters: a - entering value b - increment value */<br>        int function(int a. int b)<br>        {<br>        }<br><br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ==========================================<br>         Description:\tDescription of the function.<br><br>         Return:\tnone<br><br>         Parameters:    a   - entering value<br>                        b   - increment value<br>         ==========================================<br>         */<br>        int function(int a. int b)<br>        {<br>        }<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>\t\t-cmt_fct_categ_style-<br><br>        Note(s) :<br>        - In comment. special words must be followed by ':'.<br>        - A parameter must be followed by '-'. and then by the comment.<br>        - This option can't be set in a source file with special comment<br>          /*$O */</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=

[cmt_fct_categ_in]
CallName=-cmt_fct_categ_in-
Category=5
Description="<html>-cmt_fct_categ-     Define a special word when indenting function<br>                            comments.<br>-cmt_fct_categ_in-  This word is a special category to describe<br>                            function parameters.<br><br>        GC can indent function definition comments in a special form<br>        depending of special words defined with those options.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        options<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        -cmt_fct_categ-main<br>        -cmt_fct_categ-output<br>        -cmt_fct_categ_in-parameters<br><br><br>        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Description: Description of the function. Return: none<br>        Parameters: a - entering value b - increment value */<br>        int function(int a. int b)<br>        {<br>        }<br><br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ==========================================<br>         Description:\tDescription of the function.<br><br>         Return:\tnone<br><br>         Parameters:    a   - entering value<br>                        b   - increment value<br>         ==========================================<br>         */<br>        int function(int a. int b)<br>        {<br>        }<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>\t\t-cmt_fct_categ_style-<br><br>        Note(s) :<br>        - In comment. special words must be followed by ':'.<br>        - A parameter must be followed by '-'. and then by the comment.<br>        - This option can't be set in a source file with special comment<br>          /*$O */</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=

[cmt_fct_categ_style]
CallName=-cmt_fct_categ_style-
Category=5
Description=Set indentation style for special keywords in comments
EditorType=numeric
Enabled=true
MaxVal=1
MinVal=0
ValueDefault=0

[cmt_decl]
Category=5
Description="<html>Add separators in local variable declaration (before and/or after).<br>        Separators are by default level 1.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_decl-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            unsigned int    var<br>            long b<br>            var = 0<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~~~~~~~*/<br>            unsigned int    var<br>            long            b<br>            /*~~~~~~~~~~~~~~~~~~*/<br><br>            var = 0<br>        }<br><br>        See options(s) :<br>        -cmt_decl_max_level-<num><br>        [-no]-cmt_decl_before-<br>        -cmt_decl_len-<num><br>        [-no]-cmt_decl_auto_len-<br>        -cmt_decl_auto_len_add-<num><br><br>        Note(s) :<br>        - Can't be used with -cmt_dont_modify- option.</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_decl-|-no-cmt_decl-
ValueDefault=1

[cmt_decl_max_level]
CallName=-cmt_decl_max_level-
Category=5
Description="<html>-cmt_decl- option is valid for declaration in a statement level lesser<br>        than that value.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_decl_max_level-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~*/<br>            int b<br>            /*~~*/<br><br>            b = 0<br>            if(b)<br>            {<br>                unsigned int    var    <= stmt level is 2. so is not touched<br>                long            c<br><br>                var = c = 0<br>            }<br>        }<br><br>        -cmt_decl_max_level-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~*/<br>            int b<br>            /*~~*/<br><br>            b = 0<br>            if(b)<br>            {<br>                /*~~~~~~~~~~~~~~~~~~*/  <= stmt level 2 is now converned<br>                unsigned int    var<br>                long            c<br>                /*~~~~~~~~~~~~~~~~~~*/<br><br>                var = c = 0<br>            }<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=100

[cmt_decl_before]
Category=5
Description="<html>Add a separator before local declarations.<br>        -cmt_decl- must be enabled.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_decl_before-<br><br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~~~~~~~*/<br>            unsigned int    var<br>            long            b<br>            /*~~~~~~~~~~~~~~~~~~*/<br><br>            var = 0<br>        }<br><br>        -no-cmt_decl_before-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            unsigned int    var<br>            long            b<br>            /*~~~~~~~~~~~~~~~~~~*/<br><br>            var = 0<br>        }</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_decl_before-|-no-cmt_decl_before-
ValueDefault=1

[cmt_decl_len]
CallName=-cmt_decl_len-
Category=5
Description="<html>Se<pre><font face=\"courier new\" size=\"3\">t the maximum column of the declaration separator.<br>        -cmt_decl- must be enabled.<br>        -cmt_decl_auto_len- must be disabled.<br><br>        -cmt_decl_len-20<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~*/        <= column 20<br>            int b<br>            /*~~~~~~~~~~~~*/<br>            {<br>                /*~~~~~~*/<br>                unsigned int    var<br>                long            b<br>                /*~~~~~~*/<br>            }<br><br>            var = 0<br>        }<br><br>        -cmt_decl_len-50<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/      <= column 50<br>            int b<br>            /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/<br>            {<br>                /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/<br>                unsigned int    var<br>                long            b<br>                /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/<br>            }<br><br>            var = 0<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=120

[cmt_decl_auto_len]
Category=5
Description="<html>Co<pre><font face=\"courier new\" size=\"3\">mpute the length of the decl separator depending on code.<br>        Is disabled. the length is set by -cmt_decl_len- option.</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_decl_auto_len-|-no-cmt_decl_auto_len-
ValueDefault=1

[cmt_decl_auto_len_add]
CallName=-cmt_decl_auto_len_add-
Category=5
Description="<html>Wh<pre><font face=\"courier new\" size=\"3\">en -cmt_decl_auto_len- and -cmt_decl- are both enabled. add <num><br>        characters to the length of the separator.<br><br>        -cmt_decl_auto_len_add-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~~~~~~~*/  <= exact size of the code below<br>            unsigned int    var<br>            long            b<br>            /*~~~~~~~~~~~~~~~~~~*/<br><br>            {<br>                /*~~*/      <= idem<br>                int c<br>                /*~~*/<br>            }<br><br>            var = 0<br>        }<br><br>        -cmt_decl_auto_len_add-4<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a(void)<br>        {<br>            /*~~~~~~~~~~~~~~~~~~~~~~*/  <= size + 4<br>            unsigned int    var<br>            long            b<br>            /*~~~~~~~~~~~~~~~~~~~~~~*/<br><br>            {<br>            /*~~~~~~*/              <= size + 4<br>            int c<br>            /*~~~~~~*/<br>            }<br><br>            var = 0<br>        }</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[cmt_first_line_break_first]
Category=5
Description="<html>Add an EOL after /* of first line comments.<br>        Add an EOL before */ of first line comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_break_first-<br>        -cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * Comment <br>         * Comment<br>         */<br><br>        -no-cmt_first_line_break_first-<br>        -cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Comment <br>         * Comment<br>         */<br><br>        -no-cmt_first_line_break_first-<br>        -no-cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Comment <br>         * Comment */</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_line_break_first-|-no-cmt_first_line_break_first-
ValueDefault=1

[cmt_first_line_break_last]
Category=5
Description="<html>Add an EOL after /* of first line comments.<br>        Add an EOL before */ of first line comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_break_first-<br>        -cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * Comment <br>         * Comment<br>         */<br><br>        -no-cmt_first_line_break_first-<br>        -cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Comment <br>         * Comment<br>         */<br><br>        -no-cmt_first_line_break_first-<br>        -no-cmt_first_line_break_last-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* Comment <br>         * Comment */</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_line_break_last-|-no-cmt_first_line_break_last-
ValueDefault=1

[cmt_first_line_fill_star]
Category=5
Description="<html>Add a '*' character at the beginning of lines of first line comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_fill_star-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * Comment <br>         * Comment<br>         */<br><br>        -no-cmt_first_line_fill_star-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>           Comment <br>           Comment<br>         */<br><br>        See options(s) :<br>        [-no]-cmt_sep_fill_star-<br><br>        Note(s) :<br>        - Separators are not concerned.</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_line_fill_star-|-no-cmt_first_line_fill_star-
ValueDefault=1

[cmt_first_line_len]
CallName=-cmt_first_line_len-
Category=5
Description="<html>Set the maximum length of first line comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_len-100<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* this is a comment that should be split */<br><br>        -cmt_first_line_len-40<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * this is a comment that should be<br>         * split<br>         */<br><br>        -cmt_first_line_len-10<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * this is a<br>         * comment<br>         * that<br>         * should be<br>         * split<br>         */<br><br>        Note(s) :<br>        - Separators are not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=8
ValueDefault=80

[cmt_first_line_concat]
Category=5
Description="<html>Concat adjacent first line comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_concat-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* first line comment */<br>        /* another first line comment */<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * first line comment <br>         * another first line comment<br>         */</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_line_concat-|-no-cmt_first_line_concat-
ValueDefault=1

[cmt_first_line_blank]
Category=5
Description="<html>Add an empty line between two adjacent first line comments.<br>        -cmt_first_line_concat- must be disabled.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_first_line_blank-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* comment1 */<br>        /* comment2 */<br>        /* comment3 */<br>        if(a)<br>        {<br>        }<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* comment1 */<br>        <EOL><br>        /* comment2 */<br>        <EOL><br>        /* comment3 */<br>        if(a)<br>        {<br>        }<br><br>        See options(s) :<br>        [-no]-cmt_first_line_concat-</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_first_line_blank-|-no-cmt_first_line_blank-
ValueDefault=1

[cmt_sep_len]
CallName=-cmt_sep_len-
Category=5
Description="<html>Set the maximum length for separators. First line comments are not<br>        concerned.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_len-10<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2<br>         ---------<br>         ---------<br>         */<br><br>        -cmt_sep_len-20<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$4<br>         *******************<br>         *******************<br>         */<br>        /*$5-#############*/</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=8
ValueDefault=120

[cmt_sep_fill_star]
Category=5
Description="<html>Add a star at the beginning of all lines of a separator.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_fill_star-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$4<br>         *******************<br>         *    comment <br>         *    comment<br>         *******************<br>         */<br><br>        -no-cmt_sep_fill_star-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$4<br>         *******************<br>           comment <br>           comment<br>         *******************<br>         */<br><br>        See option(s) :<br>        -cmt_sep_char_4-<char><br>        -cmt_sep_char_split-<char><br>        [-no]-cmt_first_line_fill_star-</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_sep_fill_star-|-no-cmt_sep_fill_star-
ValueDefault=0

[cmt_sep_break]
Category=5
Description="<html>Force /* and */ to be alone on their lines for separators.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_break-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ===================<br>           comment <br>           comment<br>         ===================<br>         */<br><br>        //<br>        // =================<br>        // comment<br>        // =================<br>        //<br><br>        -no-cmt_sep_break-<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* =================<br>           comment <br>           comment<br>         =================== */<br><br>        // =================<br>        // comment<br>        // =================</font></pre></html>"
EditorType=boolean
TrueFalse=-cmt_sep_break-|-no-cmt_sep_break-
ValueDefault=1

[cmt_keep-char_1]
CallName=-cmt_keep-char_1-
Category=5
Description=(1) Keep the comment identical to /*$F but apply to the character next to the * in /*
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_2]
CallName=-cmt_keep-char_2-
Category=5
Description=(2) Keep the comment identical to /*$F but apply to the character next to the * in /*
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_3]
CallName=-cmt_keep-char_3-
Category=5
Description=(3) Keep the comment identical to /*$F but apply to the character next to the * in /*
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_4]
CallName=-cmt_keep-char_4-
Category=5
Description=(4) Keep the comment identical to /*$F but apply to the character next to the * in /*
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_cpp_1]
CallName=-cmt_keep-char_cpp_1-
Category=5
Description=(1) Keep the cpp comment as is character after the //.
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_cpp_2]
CallName=-cmt_keep-char_cpp_2-
Category=5
Description=(2) Keep the cpp comment as is character after the //.
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_cpp_3]
CallName=-cmt_keep-char_cpp_3-
Category=5
Description=(3) Keep the cpp comment as is character after the //.
EditorType=string
Enabled=false
ValueDefault=

[cmt_keep-char_cpp_4]
CallName=-cmt_keep-char_cpp_4-
Category=5
Description=(4) Keep the cpp comment as is character after the //.
EditorType=string
Enabled=false
ValueDefault=

[cmt_sep_char_1]
CallName=-cmt_sep_char_1-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=~

[cmt_sep_char_2]
CallName=-cmt_sep_char_2-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=-

[cmt_sep_char_3]
CallName=-cmt_sep_char_3-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault="="

[cmt_sep_char_4]
CallName=-cmt_sep_char_4-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=*

[cmt_sep_char_5]
CallName=-cmt_sep_char_5-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=#

[cmt_sep_char_6]
CallName=-cmt_sep_char_6-
Category=5
Description="<html>Set the special character to fill automatic comments.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_char_1-O<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$1-OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/<br>        /*$1<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO<br>         */<br><br>        -cmt_sep_char_2-#<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*$2-####################################*/<br>        /*$2<br>         ##########################################<br>         ##########################################<br>         */<br><br>        Note(s) :<br>        - /*$<num>- */ is a special form comment recognized by GC.<br>          This is a single line comment.<br>        - /*$<num> */ is a special form comment recognized by GC.<br>          This is a multiline comment.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=+

[cmt_sep_char_split]
CallName=-cmt_sep_char_split-
Category=5
Description="<html>Define the special break line character in comments.<pre><font face=\"courier new\" size=\"3\">        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* coucou  salut */<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         * coucou <br>         * salut<br>         */<br><br>        See option(s) :<br>        [-no]-cmt_first_line_concat-<br>        [-no]-cmt_cpp2c_keep_eol-<br><br>        Note(s) :<br>        - GC uses this special character to keep trace of EOL when converting<br>          C++ comments to C comments. or to concat first line comments.</font></pre></html>"
EditorType=string
Enabled=true
ValueDefault=

[cmt_sep_eol_before]
CallName=-cmt_sep_eol_before-
Category=5
Description="<html>Set the number of blank lines before and after single-line comments.<br><br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before-1<br>        -cmt_sep_eol_after-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>            foo()<br><br>            // Single line comment...<br><br>            bar()<br><br>        -cmt_sep_eol_before-0<br>        -cmt_sep_eol_after-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>            foo()<br>            // Single line comment...<br>            bar()</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after]
CallName=-cmt_sep_eol_after-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[cmt_sep_eol_before_1]
CallName=-cmt_sep_eol_before_1-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_before_2]
CallName=-cmt_sep_eol_before_2-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_before_3]
CallName=-cmt_sep_eol_before_3-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_before_4]
CallName=-cmt_sep_eol_before_4-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_before_5]
CallName=-cmt_sep_eol_before_5-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_before_6]
CallName=-cmt_sep_eol_before_6-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=2

[cmt_sep_eol_after_1]
CallName=-cmt_sep_eol_after_1-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after_2]
CallName=-cmt_sep_eol_after_2-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after_3]
CallName=-cmt_sep_eol_after_3-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after_4]
CallName=-cmt_sep_eol_after_4-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after_5]
CallName=-cmt_sep_eol_after_5-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[cmt_sep_eol_after_6]
CallName=-cmt_sep_eol_after_6-
Category=5
Description="<html>Set the number of EOL before and after special first line comments.<br>        depending on the level.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_2-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        <EOL><br>        ...<br><br>        -cmt_sep_eol_before_2-1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        ...<br>        <EOL><br>        /*$2<br>          ==========================================<br>          ==========================================<br>          */<br>        <EOL><br>        ...<br><br>        Note(s) :<br>        - Only automatic comments and /*$<num> */ comments are concerned.<br>          The /*$<num>- */ comment is not concerned.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=2

[cmt_sep_eol_before_fct_def]
CallName=-cmt_sep_eol_before_fct_def-
Category=5
Description="<html>Set the number of blank lines before a function defintion comment.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_eol_before_fct_def-0<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ==========================================<br>            proto<br>         ==========================================<br>         */<br>        void fct(void)<br>        {<br>        }<br>        /*<br>         ==========================================<br>            proto<br>         ==========================================<br>         */<br>        void fct1(void)<br>        {<br>        }<br><br>        -cmt_sep_eol_before_fct_def-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ==========================================<br>            proto<br>         ==========================================<br>         */<br>        void fct(void)<br>        {<br>        }<br>        <EOL><br>        <EOL><br>        /*<br>         ==========================================<br>            proto<br>         ==========================================<br>         */<br>        void fct1(void)<br>        {<br>        }<br><br>        See option(s) :<br>        -code_remove_empty_lines-<num><br><br>        Note(s) :<br>        -code_remove_empty_lines- has a highter priority.</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[cmt_sep_force_fct_proto]
CallName=-cmt_sep_force_fct_proto-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=0

[cmt_sep_force_fct_macro]
CallName=-cmt_sep_force_fct_macro-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=3

[cmt_sep_force_fct_def]
CallName=-cmt_sep_force_fct_def-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=3

[cmt_sep_force_class_access]
CallName=-cmt_sep_force_class_access-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=2

[cmt_sep_force_struct]
CallName=-cmt_sep_force_struct-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=2

[cmt_sep_force_class]
CallName=-cmt_sep_force_class-
Category=5
Description="<html>Set the comment level for comments found in a given position :<br><br>        - Before a function prototype (except if protoype is inside a function<br>          body).<br>        - Before a macro.<br>        - Before a function definition.<br>        - Before a class access specifier (public. protected...).<br>        - Before a struct declaration.<br>        - Before a class declaration.<br><br>        A comment must already exist. If 0 is specified. the comment is not<br>        modified by GC.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -cmt_sep_force_fct_proto-2<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /* proto */<br>        extern int func(void)<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        /*<br>         ------------------------------------------<br>            proto<br>         ------------------------------------------<br>         */<br>        extern int func(void)<br><br>        See option(s) :<br>        [-no]-cmt_add_fct_def-<br>        [-no]-cmt_add_class_access-</font></pre></html>"
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=3

[file_end_eol]
CallName=-file_end_eol-
Category=6
Description=Set the number of EOL after the last token of the file.
EditorType=numeric
Enabled=true
MaxVal=2000
MinVal=0
ValueDefault=1

[token_ext]
CallName=-token_ext-
Category=6
Description="<html>Tell GC to consider the user keyword as the given C/C++ keyword.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -token_ext-typedef$tt<br>        => tt has the same meaning as typedef<br><br>        -token_ext-extern$extern_all<br>        => extern_all has the same meaning as extern<br><br>        -token_ext-int$uint8<br>        -token_ext-int$uint16<br>        => uint8 and uint16 are some types (same as int).<br><br>        GC knows special keywordsyou can specify as a C/C++ keyword.<br>        GC will indent the corresponding source file word depending of the<br>        special word :<br><br>        -token_ext-single_word$tt<br>            tt will be alone on a line. Indent at the correct indentation<br>            level.<br><br>        -token_ext-single_word_0$tt<br>            tt will be alone on a line. and at column 0.<br><br>        Example :        -token_ext-single_word_0$WORD<br>        -token_ext-single_word_0$WORD1<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        void a(int b)<br>        {<br>            if(b)<br>            {<br>        WORD<br>                b++<br>        WORD1<br>            }<br>        }</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=

[replace_on]
Category=6
Description="<html>Ac<pre><font face=\"courier new\" size=\"3\">tivate/disactivate the word replacement mode.<br><br>        See options(s) :<br>        -replace-<word to replace>$<replacement word></font></pre></html>"
EditorType=boolean
TrueFalse=-replace_on-|-no-replace_on-
ValueDefault=1

[replace]
CallName=-replace-
Category=6
Description="<html>GC will replace all occurrences of <word to replace> by<br>        <replacement word>.<br>        -replace_on- option must be enabled.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -replace-int$uint<br>        -replace-a$variable<br><br>        before<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        int a<br>        int     b<br><br>        after<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>        uint    variable<br>        uint    b<br><br>        See options(s) :<br>        [-no]-replace_on-</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=<word to replace>$<replacement word>

[dependencies]
Category=6
Description="<html>-d<pre><font face=\"courier new\" size=\"3\">ependencies- Activate/Deactivate the output of file dependencies.<br>        With -dependencies_all- Real dependencies will be computed (instead of<br>        just includes dependencies). This option takes much longer. but does a<br>        better job.<br><br>        -dependencies- is ignored if -dependencies_all- is set to TRUE.<br><br>        typical report<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Processing C:oulotCourcesndent.c   (136 lines. 3360 characters)<br>Processing ctype.h<br>** Warning: Unable to open source file ==> ctype.h<br>Processing malloc.h<br>** Warning: Unable to open source file ==> malloc.h<br>Processing stdlib.h<br>** Warning: Unable to open source file ==> stdlib.h<br>Processing string.h<br>** Warning: Unable to open source file ==> string.h<br>Processing config.h<br>Processing in.h<br>Processing grammar.h<br>Processing lexi.h<br>Processing error.h<br>Processing tools.h<br>Processing indent.h<br>Processing assert.h<br>** Warning: Unable to open source file ==> assert.h<br>- Includes files --------------------------------------------------------<br>(     1) #include config.h<br>(     2) #include in.h<br>(     1) #include grammar.h<br>(     2) #include lexi.h<br>(     1) #include error.h<br>(     1) #include tools.h<br>(     1) #include indent.h<br>******** Unresolved 5 Total 12<br>- Scanning   1 ----------------------------------------------------------<br>.<br>- Direct dependencies ---------------------------------------------------<br>(     1) #include config.h<br>(     3) #include in.h<br>(     8) #include lexi.h<br>(     5) #include tools.h<br>(    21) #include indent.h<br>******** Total 5<br>- No dependencies -------------------------------------------------------<br>(     1) #include grammar.h<br>Included by C:oulotCourcesndent.c<br>(     1) #include error.h<br>Included by C:oulotCourcesndent.c<br>******** Total 2<br>-------------------------------------------------------------------------</font></pre></html>"
EditorType=boolean
TrueFalse=-dependencies-|-no-dependencies-
ValueDefault=0

[dependencies_all]
Category=6
Description="<html>-d<pre><font face=\"courier new\" size=\"3\">ependencies- Activate/Deactivate the output of file dependencies.<br>        With -dependencies_all- Real dependencies will be computed (instead of<br>        just includes dependencies). This option takes much longer. but does a<br>        better job.<br><br>        -dependencies- is ignored if -dependencies_all- is set to TRUE.<br><br>        typical report<br>        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br><br>Processing C:oulotCourcesndent.c   (136 lines. 3360 characters)<br>Processing ctype.h<br>** Warning: Unable to open source file ==> ctype.h<br>Processing malloc.h<br>** Warning: Unable to open source file ==> malloc.h<br>Processing stdlib.h<br>** Warning: Unable to open source file ==> stdlib.h<br>Processing string.h<br>** Warning: Unable to open source file ==> string.h<br>Processing config.h<br>Processing in.h<br>Processing grammar.h<br>Processing lexi.h<br>Processing error.h<br>Processing tools.h<br>Processing indent.h<br>Processing assert.h<br>** Warning: Unable to open source file ==> assert.h<br>- Includes files --------------------------------------------------------<br>(     1) #include config.h<br>(     2) #include in.h<br>(     1) #include grammar.h<br>(     2) #include lexi.h<br>(     1) #include error.h<br>(     1) #include tools.h<br>(     1) #include indent.h<br>******** Unresolved 5 Total 12<br>- Scanning   1 ----------------------------------------------------------<br>.<br>- Direct dependencies ---------------------------------------------------<br>(     1) #include config.h<br>(     3) #include in.h<br>(     8) #include lexi.h<br>(     5) #include tools.h<br>(    21) #include indent.h<br>******** Total 5<br>- No dependencies -------------------------------------------------------<br>(     1) #include grammar.h<br>Included by C:oulotCourcesndent.c<br>(     1) #include error.h<br>Included by C:oulotCourcesndent.c<br>******** Total 2<br>-------------------------------------------------------------------------</font></pre></html>"
EditorType=boolean
TrueFalse=-dependencies_all-|-no-dependencies_all-
ValueDefault=0

[dependencies_dir]
CallName=-dependencies_dir-
Category=6
Description="<html>When -dependencies- option is activated. defines a path where GC<br>        will find includes.<br>        Example :<pre><font face=\"courier new\" size=\"3\">        -dependencies_dir-c:/system/includes<br>        -dependencies_dir-c:/GC/sources</font></pre></html>"
EditorType=string
Enabled=false
ValueDefault=./

[dependencies_dir_rec]
Category=6
Description="<html>Al<pre><font face=\"courier new\" size=\"3\">l directories set with -dependencies_dir- are recurs scan.<br><br>        See options(s) :<br>        [-no]-dependencies_dir-</font></pre></html>"
EditorType=boolean
TrueFalse=-dependencies_dir_rec-|-no-dependencies_dir_rec-
ValueDefault=0



















